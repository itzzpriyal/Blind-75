// class Solution{
// public:
//     int maxArea(vector<int>& height){
//         int max_area=0;
//         for(int i=0; i<height.size(); i++){
//             for(int j=i+1; j<height.size(); j++){
//                 int current=min(height[i], height[j]) * (j - i);
//                 max_area=max(max_area, current);
//                 }
//         }
//         return max_area;
//     }
// };(time limit exceeded)

//2 pointer approach

class Solution{
public:
    int maxArea(vector<int>& height){
        int L=0;
        int R=height.size()-1;
        int max_area=0;
        while(L<R){
            int current_area=min(height[L],height[R])*(R-L);
            max_area=max(current_area,max_area);
           if(height[L]<height[R]){
                L++;
            }
            else{
                R--;
            }
        }
         return max_area;
         }
        };
