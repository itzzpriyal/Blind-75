class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals,
                               vector<int>& newInterval) {
        int n = intervals.size();
        int i = 0;
        vector<vector<int>> result;
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.push_back(intervals[i]);
            i++;
        }
        /*In the first while loop, weâ€™re only checking if the interval ends
  strictly before the new one starts.

  The second loop is only entered after the first one finishes, so we never end
  up checking the same interval in both loops.*/
        while (i < n  && intervals[i][0] <= newInterval[1]) {
            newInterval[0]=min(intervals[i][0],newInterval[0]);
            newInterval[1]=max(intervals[i][1],newInterval[1]);
              i++;
        }
         result.push_back(newInterval);
        //leftover values of i intervals get directly added in the result
        while (i < n ) {
            result.push_back(intervals[i]);
            i++;
        }
        return result;
    }
};
